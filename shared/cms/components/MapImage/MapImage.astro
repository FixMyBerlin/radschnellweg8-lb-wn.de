---
import { Picture } from 'astro:assets'
import { getEntry, type InferEntrySchema } from 'astro:content'
import ImageFigcaption from '../ImageFigcaption.astro'
import { customIcons } from './customIcons'

const { relationship } = Astro.props
const mapImage = await getEntry('maps', relationship)
if (mapImage === undefined) return Astro.redirect('/404')

const { legend, image, imageAlt, imageCopyright } = mapImage.data as InferEntrySchema<'maps'>
---

<figure>
  <Picture
    aria-labelledby={mapImage.id}
    src={image}
    alt={imageAlt ?? ''}
    class="!mb-0 w-full"
    width={960}
    densities={[1.5, 2]}
    formats={['png', 'webp', 'avif']}
  />
  {
    (legend || imageCopyright) && (
      <div id={mapImage.id} class="flex flex-col gap-3 bg-gray-200 p-4">
        {legend &&
          legend.map((legendItem) => {
            const iconStyle = legendItem.iconKey ? customIcons[legendItem.iconKey].style : null

            return (
              <div class="flex items-center gap-4 text-sm leading-snug">
                <div class="flex w-5 items-center justify-end">
                  {legendItem.shape === 'line' && (
                    <div class="h-1 w-5" style={`background-color: ${legendItem.color}`} />
                  )}
                  {legendItem.shape === 'circle' && (
                    <div
                      class="h-3 w-3 rounded-full"
                      style={`background-color: ${legendItem.color}`}
                    />
                  )}
                  {legendItem.shape === 'icon' && iconStyle && (
                    <div class="w-5" style={iconStyle} />
                  )}
                </div>
                <div>{legendItem.label}</div>
              </div>
            )
          })}
        {imageCopyright && (
          <ImageFigcaption className="text-right">{imageCopyright}</ImageFigcaption>
        )}
      </div>
    )
  }
</figure>
