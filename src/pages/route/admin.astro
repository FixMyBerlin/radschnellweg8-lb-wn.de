---
import Layout from '@shared/layouts/Layout.astro'
import Section from '@shared/layouts/Section.astro'
import PageHeadline from '@shared/sections/PageHeadline.astro'
import { getCollection } from 'astro:content'

const routeGeometry = await getCollection('routegeometry')
const subsectionGeoSlugs = routeGeometry
  .map(({ data: feature }) => feature.properties.subsectionSlug)
  .filter(Boolean)

const routeSegments = await getCollection('routesegments')
const subsectionCmsSlugs = routeSegments.map((segment) => segment.data.tsSlug).filter(Boolean)

const allSubsectionSlugs = [...new Set([...subsectionGeoSlugs, ...subsectionCmsSlugs])]
---

<Layout noindex title="Daten Abgleich für Abschnitte">
  <PageHeadline title="Daten Abgleich für Abschnitte" />
  <Section prose>
    <p>
      Hier werden die Abschnitte aus dem CMS mit den Geodaten aus dem GeoJSON verglichen basierend
      auf ihrem Slug.
    </p>
    <ul>
      <li>GRÜN: Abschnitt ist in CMS und GeoJSON vorhanden.</li>
      <li>ROT: Abschnitt ist entweder nur in CMS oder nur in GeoJSON vorhanden.</li>
      <li>
        ROTE UMRANDUNG: Abschnitt ist mehrfach im CMS/Geo JSON vorhanden. Dies führt auf der Website
        nicht zu einem Fehler, sondern es wird einfach der erste Eintrag genommen.
      </li>
    </ul>
    <p>Ziel: beide Tabellen sind grün und nichts ist rot umrandet.</p>
    <h2>Abschnitte</h2>
    <table>
      <thead>
        <tr>
          <th>Subsection / TS Slug</th>
          <th>In CMS</th>
          <th>In GeoJSON</th>
        </tr>
      </thead>
      <tbody>
        {
          allSubsectionSlugs.map((slug) => (
            <tr
              class={
                subsectionCmsSlugs.includes(slug) && subsectionGeoSlugs.includes(slug)
                  ? 'bg-green-200'
                  : 'bg-red-200'
              }
            >
              <td>{slug}</td>
              <td
                class={
                  routeSegments.filter((s) => s.data.tsSlug === slug).length > 1
                    ? 'flex flex-col border-2 border-red-600'
                    : ''
                }
              >
                {subsectionCmsSlugs.includes(slug)
                  ? routeSegments
                      .filter((s) => s.data.tsSlug === slug)
                      .map((segment) => <a href={`/route/${segment.slug}`}>{segment.slug}</a>)
                  : ''}
              </td>
              <td>{subsectionGeoSlugs.includes(slug!) ? 'x' : ''}</td>
            </tr>
          ))
        }
      </tbody>
    </table>

    <h3>Abschnitte Geo data Raw</h3>
    <pre>{JSON.stringify(subsectionGeoSlugs, undefined, 2)}</pre>
  </Section>
</Layout>
